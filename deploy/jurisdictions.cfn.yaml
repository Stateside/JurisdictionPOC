AWSTemplateFormatVersion: 2010-09-09
Description: CFN template for Jurisdiciton and Estate Registry deployment
Parameters:
  AMI:
    Description: ID of AMI used for web instance
    Type: AWS::EC2::Image::Id
    Default: ami-0b0dcb5067f052a63
  GitHubBranch:
    Type: String
    Default: devops
    Description: GitHub branch that will be deployed
  GitHubConnectionArn:
    Type: String
    Default: arn:aws:codestar-connections:us-east-1:397500405596:connection/f6426d72-603e-43e5-8ce9-fcc770b43ae8
    Description: GitHub Connection ARN from AWS CodePipeline Developer tools Settings 
  GitHubRepository:
    Type: String
    Default: Stateside/JurisdictionPOC
    Description: owner/repository
  InstanceType:
    Description: Server EC2 instance type
    Type: String
    Default: t2.medium
    ConstraintDescription: must be a valid EC2 instance type
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair
    Default: ec2-ssh-key-pair
  SSLCloudFrontCertificateARN:
    Type: String
    AllowedPattern: ^arn:aws:acm:[a-z]{2}-[a-z]+-\d{1}:\d{12}:certificate/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
    ConstraintDescription: Invalid SSL Certificate ARN. It must be in this arn:aws:acm:<region>:<account-id>:certificate/<resourceid> format.
    Description: Provide ARN of the SSL certificate imported in AWS Certificate Manager. It must be in this arn:aws:acm:<region>:<account-id>:certificate/<resourceid> format.
    Default: arn:aws:acm:us-east-1:397500405596:certificate/cf52d399-0f8b-4417-a8ae-d916f1363775

Resources:

# Server
  WebServerInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-WebServerInstanceRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/AmazonESCognitoAccess
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-pipeline-service-role-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "autoscaling:Describe*"
                  - "cloudformation:Describe*"
                  - "cloudformation:GetTemplate"
                  - "s3:*"
                  - "codeartifact:*"
                Resource: "*"
  WebServerInstanceRoleInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-WebServerInstanceProfile
      Path: /
      Roles:
        - !Ref WebServerInstanceRole
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 3000
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment1: Install simple website for testing
      Comment2: Install Cloud Formation helper scripts - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
      Comment3: Install CodeDeploy Agent - https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html
      Comment4: See for more info - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      AWS::CloudFormation::Init:
        configSets:
          InstallAndConfigure:
            - Install
            - Configure
        Install:
          packages:
            yum:
              httpd: []
              ruby: []
              wget: []
          files:
            /var/www/html/index.html:
              content: Hello World!!
              mode: "000600"
              owner: apache
              group: apache
            /etc/cfn/cfn-hup.conf:
              content: !Sub |+
                    [main]
                    stack=${AWS::StackId}
                    region=${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |+
                    [cfn-auto-reloader-hook]
                    triggers=post.update
                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                    action=/opt/aws/bin/cfn-init -v --stack '${AWS::StackName}' --resource WebServerInstance --configsets InstallAndConfigure --region '${AWS::Region}' --role ${WebServerInstanceRole}
                    runas=root
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Configure:
          commands:
            01_Download_And_Install_Code_Deploy:
              cwd: /home/ec2-user
              command: !Sub |+
                wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
                chmod +x ./install
                ./install auto
                rm install
      IamInstanceProfile: !Ref WebServerInstanceRoleInstanceProfile
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      IamInstanceProfile: !Ref WebServerInstanceRoleInstanceProfile
      KeyName: !Ref KeyName
      Tags:
        - Key: "Type"
          Value: "WebServer"
        - Key: "Name"
          Value: "Web Server"
      UserData:
        Fn::Base64:
          !Sub |+
              #!/bin/bash -x
              #Run CloudFormation helper script to perform initialization that is described in the metadata for this instance
              /opt/aws/bin/cfn-init -v --stack '${AWS::StackName}' --resource WebServerInstance --configsets InstallAndConfigure --region '${AWS::Region}' --role ${WebServerInstanceRole}
              #Signal Cloud Formation that this EC2 instance is ready
              /opt/aws/bin/cfn-signal -e $? --stack '${AWS::StackName}' --resource WebServerInstance  --region '${AWS::Region}'
  
#CodeDeploy
  CodePipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub CodePipelineRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codepipeline.amazonaws.com"
          Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-pipeline-service-role-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - s3:putObject
                - s3:getObject
                - codebuild:*
                - codedeploy:*
                - codestar-connections:*
              Resource:
                - "*"
  CodeDeployServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-web-deploy-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
  ArtifactBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BucketName: !Sub code-pipeline-${AWS::StackName}-${AWS::Region}
  WebDeploymentApp:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Sub jurisdictions-${AWS::StackName}
      ComputePlatform: Server
  WebDeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      ApplicationName: !Ref WebDeploymentApp
      DeploymentGroupName: !Sub jurisdictions-${AWS::StackName}
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      ServiceRoleArn: !Sub ${CodeDeployServiceRole.Arn}
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      Ec2TagSet:
        Ec2TagSetList:
          - Ec2TagGroup:
            - Type: KEY_AND_VALUE
              Key: "Type"
              Value: "WebServer"
  InvalidationBuildServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-invalidation-build-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub ${AWS::StackName}-invalidation-build-service-role-logs-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-invalidation-build-log"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-invalidation-build-log:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-invalidate-cloudfront-build-project"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-invalidate-cloudfront-build-project:*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
              -
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactBucket}*"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
              -
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${AWS::StackName}-invalidate-cloudfront-build-project-*"
                Action:
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "codebuild:UpdateReport"
                  - "codebuild:BatchPutTestCases"
                  - "codebuild:BatchPutCodeCoverages"
              -
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${JurisdictionCloudFront}"
                Action:
                  - cloudfront:CreateInvalidation
  InvalidationBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub ${AWS::StackName}-invalidate-cloudfront-build-project
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |+
          version: 0.2
          phases:
            build:
              commands:
                aws cloudfront create-invalidation --distribution-id ${JurisdictionCloudFront} --paths "/*"
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:2.0"
        ComputeType: BUILD_GENERAL1_SMALL
        ImagePullCredentialsType: CODEBUILD
      ServiceRole: !Ref InvalidationBuildServiceRole
      EncryptionKey: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub ${AWS::StackName}-invalidation-build-log
          StreamName: !Sub ${AWS::StackName}-invalidation-build-log
        S3Logs:
          Status: DISABLED
          EncryptionDisabled: false
  Pipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub code-pipeline-${AWS::StackName}
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${CodePipelineRole}
      Stages:

        # Stage 1:  Get the source from GitHub:
        - Name: Source
          Actions:
            - Name: SourceAction
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection 
                Version: "1"
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Ref GitHubRepository
                BranchName: !Ref GitHubBranch
                DetectChanges: true
              OutputArtifacts:
                - Name: SourceArtifact

        # Stage 2:  Deploy to server
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: "1"
              RunOrder: 1
              Configuration:
                ApplicationName: !Sub jurisdictions-${AWS::StackName}
                DeploymentGroupName: !Sub jurisdictions-${AWS::StackName}
              InputArtifacts:
                - Name: SourceArtifact
              Region: !Sub ${AWS::Region}
              Namespace: DeployVariables

        # Stage 3:  Invalidate CloudFront cache
        - Name: InvalidateCache
          Actions:
            - Name: InvalidateCache
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              RunOrder: 1
              Configuration:
                ProjectName: !Ref InvalidationBuildProject
              InputArtifacts:
                - Name: SourceArtifact
              Region: !Sub ${AWS::Region}

# CloudFront
  JurisdictionCloudFront:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub ${WebServerInstance.PublicDnsName}
          Id: WebOrigin
          CustomOriginConfig:
            HTTPPort: 3000
            OriginProtocolPolicy: http-only
        Enabled: true
        Comment: CDN for Jurisdiction website
        DefaultRootObject: index.js
        Aliases:
        - jurisdictions.stateside.agency
        DefaultCacheBehavior:
          AllowedMethods:
          - HEAD
          - GET
          - OPTIONS
          Compress: true
          TargetOriginId: WebOrigin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCloudFrontCertificateARN
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only

Outputs:
  WebURL:
    Description: The URL of the Jurisdiction website
    Value: !Sub http://${WebServerInstance.PublicDnsName}:3000
