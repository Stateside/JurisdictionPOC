/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace JSCRevisionsLib {
  export type VotingRulesStruct = {
    votingPeriod: PromiseOrValue<BigNumberish>;
    approvals: PromiseOrValue<BigNumberish>;
    majority: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
    roles: PromiseOrValue<string>[];
  };

  export type VotingRulesStructOutput = [
    number,
    number,
    number,
    number,
    string[]
  ] & {
    votingPeriod: number;
    approvals: number;
    majority: number;
    quorum: number;
    roles: string[];
  };

  export type RevisionStruct = {
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    paramNames: PromiseOrValue<string>[];
    paramTypes: PromiseOrValue<BigNumberish>[];
    paramHints: PromiseOrValue<string>[];
    rules: JSCRevisionsLib.VotingRulesStruct;
  };

  export type RevisionStructOutput = [
    string,
    string,
    string[],
    number[],
    string[],
    JSCRevisionsLib.VotingRulesStructOutput
  ] & {
    name: string;
    description: string;
    paramNames: string[];
    paramTypes: number[];
    paramHints: string[];
    rules: JSCRevisionsLib.VotingRulesStructOutput;
  };
}

export interface JSCTitleTokenLibInterface extends utils.Interface {
  functions: {
    "getChangeOwnerRevision()": FunctionFragment;
    "getFreezeOwnerRevision()": FunctionFragment;
    "getFreezeTokenRevision()": FunctionFragment;
    "getRevisions()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getChangeOwnerRevision"
      | "getFreezeOwnerRevision"
      | "getFreezeTokenRevision"
      | "getRevisions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getChangeOwnerRevision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFreezeOwnerRevision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFreezeTokenRevision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRevisions",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getChangeOwnerRevision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreezeOwnerRevision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreezeTokenRevision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevisions",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface JSCTitleTokenLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JSCTitleTokenLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getChangeOwnerRevision(
      overrides?: CallOverrides
    ): Promise<[JSCRevisionsLib.RevisionStructOutput]>;

    getFreezeOwnerRevision(
      overrides?: CallOverrides
    ): Promise<[JSCRevisionsLib.RevisionStructOutput]>;

    getFreezeTokenRevision(
      overrides?: CallOverrides
    ): Promise<[JSCRevisionsLib.RevisionStructOutput]>;

    getRevisions(
      overrides?: CallOverrides
    ): Promise<
      [JSCRevisionsLib.RevisionStructOutput[]] & {
        result: JSCRevisionsLib.RevisionStructOutput[];
      }
    >;
  };

  getChangeOwnerRevision(
    overrides?: CallOverrides
  ): Promise<JSCRevisionsLib.RevisionStructOutput>;

  getFreezeOwnerRevision(
    overrides?: CallOverrides
  ): Promise<JSCRevisionsLib.RevisionStructOutput>;

  getFreezeTokenRevision(
    overrides?: CallOverrides
  ): Promise<JSCRevisionsLib.RevisionStructOutput>;

  getRevisions(
    overrides?: CallOverrides
  ): Promise<JSCRevisionsLib.RevisionStructOutput[]>;

  callStatic: {
    getChangeOwnerRevision(
      overrides?: CallOverrides
    ): Promise<JSCRevisionsLib.RevisionStructOutput>;

    getFreezeOwnerRevision(
      overrides?: CallOverrides
    ): Promise<JSCRevisionsLib.RevisionStructOutput>;

    getFreezeTokenRevision(
      overrides?: CallOverrides
    ): Promise<JSCRevisionsLib.RevisionStructOutput>;

    getRevisions(
      overrides?: CallOverrides
    ): Promise<JSCRevisionsLib.RevisionStructOutput[]>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    getChangeOwnerRevision(overrides?: CallOverrides): Promise<BigNumber>;

    getFreezeOwnerRevision(overrides?: CallOverrides): Promise<BigNumber>;

    getFreezeTokenRevision(overrides?: CallOverrides): Promise<BigNumber>;

    getRevisions(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getChangeOwnerRevision(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreezeOwnerRevision(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreezeTokenRevision(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevisions(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
