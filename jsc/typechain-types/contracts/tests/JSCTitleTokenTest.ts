/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace JSCRevisionsLib {
  export type VotingRulesStruct = {
    votingPeriod: PromiseOrValue<BigNumberish>;
    approvals: PromiseOrValue<BigNumberish>;
    majority: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
    roles: PromiseOrValue<string>[];
  };

  export type VotingRulesStructOutput = [
    number,
    number,
    number,
    number,
    string[]
  ] & {
    votingPeriod: number;
    approvals: number;
    majority: number;
    quorum: number;
    roles: string[];
  };

  export type RevisionStruct = {
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    paramNames: PromiseOrValue<string>[];
    paramTypes: PromiseOrValue<BigNumberish>[];
    paramHints: PromiseOrValue<string>[];
    rules: JSCRevisionsLib.VotingRulesStruct;
  };

  export type RevisionStructOutput = [
    string,
    string,
    string[],
    number[],
    string[],
    JSCRevisionsLib.VotingRulesStructOutput
  ] & {
    name: string;
    description: string;
    paramNames: string[];
    paramTypes: number[];
    paramHints: string[];
    rules: JSCRevisionsLib.VotingRulesStructOutput;
  };
}

export declare namespace JSCTitleTokenLib {
  export type OfferStruct = {
    buyer: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    offeredOn: PromiseOrValue<BigNumberish>;
  };

  export type OfferStructOutput = [string, BigNumber, BigNumber] & {
    buyer: string;
    amount: BigNumber;
    offeredOn: BigNumber;
  };
}

export declare namespace JSCConfigurableLib {
  export type ParameterInfoStruct = {
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    ptype: PromiseOrValue<BigNumberish>;
  };

  export type ParameterInfoStructOutput = [string, string, number] & {
    name: string;
    description: string;
    ptype: number;
  };
}

export interface JSCTitleTokenTestInterface extends utils.Interface {
  functions: {
    "acceptOfferToBuy(uint256,address)": FunctionFragment;
    "acceptOfferToSell(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "cancelOfferToBuy(uint256)": FunctionFragment;
    "cancelOfferToSell(uint256,address)": FunctionFragment;
    "countOffersToBuy(uint256)": FunctionFragment;
    "countOffersToSell(uint256)": FunctionFragment;
    "executeRevision(string,bytes)": FunctionFragment;
    "getAddressParameter(string)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getBoolParameter(string)": FunctionFragment;
    "getNumberParameter(string)": FunctionFragment;
    "getRevisionByName(string)": FunctionFragment;
    "getStringParameter(string)": FunctionFragment;
    "init(string,string,string,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isFrozen()": FunctionFragment;
    "isFrozenOwner(address)": FunctionFragment;
    "isFrozenToken(uint256)": FunctionFragment;
    "isValidParameterIterator(uint256)": FunctionFragment;
    "isValidRevisionIterator(uint256)": FunctionFragment;
    "iterateParameters()": FunctionFragment;
    "iterateRevisions()": FunctionFragment;
    "mint(address,string)": FunctionFragment;
    "name()": FunctionFragment;
    "nextParameter(uint256)": FunctionFragment;
    "nextRevision(uint256)": FunctionFragment;
    "offerToBuy(uint256,uint256)": FunctionFragment;
    "offerToBuyAtIndex(uint256,uint256)": FunctionFragment;
    "offerToSell(uint256,address,uint256)": FunctionFragment;
    "offerToSellAtIndex(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "ownerTokenAtIndex(address,uint256)": FunctionFragment;
    "parameterCount()": FunctionFragment;
    "parameterIteratorGet(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revisionCount()": FunctionFragment;
    "revisionIteratorGet(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setFrozenContract(bool)": FunctionFragment;
    "setFrozenOwner(address,bool)": FunctionFragment;
    "setFrozenToken(uint256,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "titleToTokenId(string)": FunctionFragment;
    "tokenAtIndex(uint256)": FunctionFragment;
    "tokenToTitleId(uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOfferToBuy"
      | "acceptOfferToSell"
      | "approve"
      | "balanceOf"
      | "burn"
      | "cancelOfferToBuy"
      | "cancelOfferToSell"
      | "countOffersToBuy"
      | "countOffersToSell"
      | "executeRevision"
      | "getAddressParameter"
      | "getApproved"
      | "getBoolParameter"
      | "getNumberParameter"
      | "getRevisionByName"
      | "getStringParameter"
      | "init"
      | "isApprovedForAll"
      | "isFrozen"
      | "isFrozenOwner"
      | "isFrozenToken"
      | "isValidParameterIterator"
      | "isValidRevisionIterator"
      | "iterateParameters"
      | "iterateRevisions"
      | "mint"
      | "name"
      | "nextParameter"
      | "nextRevision"
      | "offerToBuy"
      | "offerToBuyAtIndex"
      | "offerToSell"
      | "offerToSellAtIndex"
      | "owner"
      | "ownerOf"
      | "ownerTokenAtIndex"
      | "parameterCount"
      | "parameterIteratorGet"
      | "renounceOwnership"
      | "revisionCount"
      | "revisionIteratorGet"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setFrozenContract"
      | "setFrozenOwner"
      | "setFrozenToken"
      | "supportsInterface"
      | "symbol"
      | "titleToTokenId"
      | "tokenAtIndex"
      | "tokenToTitleId"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOfferToBuy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOfferToSell",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOfferToBuy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOfferToSell",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "countOffersToBuy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "countOffersToSell",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRevision",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressParameter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoolParameter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberParameter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevisionByName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStringParameter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isFrozenOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFrozenToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidParameterIterator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidRevisionIterator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "iterateParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "iterateRevisions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextParameter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRevision",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offerToBuy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offerToBuyAtIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "offerToSell",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerToSellAtIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerTokenAtIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "parameterCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parameterIteratorGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revisionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revisionIteratorGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrozenContract",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrozenOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrozenToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "titleToTokenId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToTitleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOfferToBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOfferToSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOfferToBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOfferToSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countOffersToBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countOffersToSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRevision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoolParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevisionByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStringParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFrozenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFrozenToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidParameterIterator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidRevisionIterator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iterateParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iterateRevisions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRevision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offerToBuy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offerToBuyAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerToSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerToSellAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parameterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parameterIteratorGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revisionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revisionIteratorGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFrozenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFrozenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFrozenToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "titleToTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToTitleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddressParameterAdded(string,address)": EventFragment;
    "AddressParameterRemoved(string,address)": EventFragment;
    "AddressParameterUpdated(string,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BoolParameterAdded(string,bool)": EventFragment;
    "BoolParameterUpdated(string,bool)": EventFragment;
    "ContractFrozen(address,bool)": EventFragment;
    "NumberParameterAdded(string,uint256)": EventFragment;
    "NumberParameterUpdated(string,uint256)": EventFragment;
    "OfferToBuy(uint256,address,uint256)": EventFragment;
    "OfferToBuyCancelled(uint256,address)": EventFragment;
    "OfferToSell(uint256,address,uint256)": EventFragment;
    "OfferToSellCancelled(uint256,address)": EventFragment;
    "OwnerFrozen(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RevisionAdded(string)": EventFragment;
    "RevisionExecuted(string,bytes)": EventFragment;
    "RevisionRemoved(string)": EventFragment;
    "StringParameterAdded(string,string)": EventFragment;
    "StringParameterUpdated(string,string)": EventFragment;
    "TokenFrozen(uint256,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressParameterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressParameterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolParameterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NumberParameterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NumberParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferToBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferToBuyCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferToSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferToSellCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevisionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevisionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevisionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringParameterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AddressParameterAddedEventObject {
  name: string;
  value: string;
}
export type AddressParameterAddedEvent = TypedEvent<
  [string, string],
  AddressParameterAddedEventObject
>;

export type AddressParameterAddedEventFilter =
  TypedEventFilter<AddressParameterAddedEvent>;

export interface AddressParameterRemovedEventObject {
  name: string;
  value: string;
}
export type AddressParameterRemovedEvent = TypedEvent<
  [string, string],
  AddressParameterRemovedEventObject
>;

export type AddressParameterRemovedEventFilter =
  TypedEventFilter<AddressParameterRemovedEvent>;

export interface AddressParameterUpdatedEventObject {
  name: string;
  value: string;
}
export type AddressParameterUpdatedEvent = TypedEvent<
  [string, string],
  AddressParameterUpdatedEventObject
>;

export type AddressParameterUpdatedEventFilter =
  TypedEventFilter<AddressParameterUpdatedEvent>;

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface BoolParameterAddedEventObject {
  name: string;
  value: boolean;
}
export type BoolParameterAddedEvent = TypedEvent<
  [string, boolean],
  BoolParameterAddedEventObject
>;

export type BoolParameterAddedEventFilter =
  TypedEventFilter<BoolParameterAddedEvent>;

export interface BoolParameterUpdatedEventObject {
  name: string;
  value: boolean;
}
export type BoolParameterUpdatedEvent = TypedEvent<
  [string, boolean],
  BoolParameterUpdatedEventObject
>;

export type BoolParameterUpdatedEventFilter =
  TypedEventFilter<BoolParameterUpdatedEvent>;

export interface ContractFrozenEventObject {
  con: string;
  frozen: boolean;
}
export type ContractFrozenEvent = TypedEvent<
  [string, boolean],
  ContractFrozenEventObject
>;

export type ContractFrozenEventFilter = TypedEventFilter<ContractFrozenEvent>;

export interface NumberParameterAddedEventObject {
  name: string;
  value: BigNumber;
}
export type NumberParameterAddedEvent = TypedEvent<
  [string, BigNumber],
  NumberParameterAddedEventObject
>;

export type NumberParameterAddedEventFilter =
  TypedEventFilter<NumberParameterAddedEvent>;

export interface NumberParameterUpdatedEventObject {
  name: string;
  value: BigNumber;
}
export type NumberParameterUpdatedEvent = TypedEvent<
  [string, BigNumber],
  NumberParameterUpdatedEventObject
>;

export type NumberParameterUpdatedEventFilter =
  TypedEventFilter<NumberParameterUpdatedEvent>;

export interface OfferToBuyEventObject {
  tokenId: BigNumber;
  buyer: string;
  amount: BigNumber;
}
export type OfferToBuyEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  OfferToBuyEventObject
>;

export type OfferToBuyEventFilter = TypedEventFilter<OfferToBuyEvent>;

export interface OfferToBuyCancelledEventObject {
  tokenId: BigNumber;
  buyer: string;
}
export type OfferToBuyCancelledEvent = TypedEvent<
  [BigNumber, string],
  OfferToBuyCancelledEventObject
>;

export type OfferToBuyCancelledEventFilter =
  TypedEventFilter<OfferToBuyCancelledEvent>;

export interface OfferToSellEventObject {
  tokenId: BigNumber;
  buyer: string;
  amount: BigNumber;
}
export type OfferToSellEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  OfferToSellEventObject
>;

export type OfferToSellEventFilter = TypedEventFilter<OfferToSellEvent>;

export interface OfferToSellCancelledEventObject {
  tokenId: BigNumber;
  buyer: string;
}
export type OfferToSellCancelledEvent = TypedEvent<
  [BigNumber, string],
  OfferToSellCancelledEventObject
>;

export type OfferToSellCancelledEventFilter =
  TypedEventFilter<OfferToSellCancelledEvent>;

export interface OwnerFrozenEventObject {
  owner: string;
  frozen: boolean;
}
export type OwnerFrozenEvent = TypedEvent<
  [string, boolean],
  OwnerFrozenEventObject
>;

export type OwnerFrozenEventFilter = TypedEventFilter<OwnerFrozenEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RevisionAddedEventObject {
  name: string;
}
export type RevisionAddedEvent = TypedEvent<[string], RevisionAddedEventObject>;

export type RevisionAddedEventFilter = TypedEventFilter<RevisionAddedEvent>;

export interface RevisionExecutedEventObject {
  name: string;
  pdata: string;
}
export type RevisionExecutedEvent = TypedEvent<
  [string, string],
  RevisionExecutedEventObject
>;

export type RevisionExecutedEventFilter =
  TypedEventFilter<RevisionExecutedEvent>;

export interface RevisionRemovedEventObject {
  name: string;
}
export type RevisionRemovedEvent = TypedEvent<
  [string],
  RevisionRemovedEventObject
>;

export type RevisionRemovedEventFilter = TypedEventFilter<RevisionRemovedEvent>;

export interface StringParameterAddedEventObject {
  name: string;
  value: string;
}
export type StringParameterAddedEvent = TypedEvent<
  [string, string],
  StringParameterAddedEventObject
>;

export type StringParameterAddedEventFilter =
  TypedEventFilter<StringParameterAddedEvent>;

export interface StringParameterUpdatedEventObject {
  name: string;
  value: string;
}
export type StringParameterUpdatedEvent = TypedEvent<
  [string, string],
  StringParameterUpdatedEventObject
>;

export type StringParameterUpdatedEventFilter =
  TypedEventFilter<StringParameterUpdatedEvent>;

export interface TokenFrozenEventObject {
  tokenId: BigNumber;
  frozen: boolean;
}
export type TokenFrozenEvent = TypedEvent<
  [BigNumber, boolean],
  TokenFrozenEventObject
>;

export type TokenFrozenEventFilter = TypedEventFilter<TokenFrozenEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface JSCTitleTokenTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JSCTitleTokenTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOfferToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOfferToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOfferToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOfferToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    countOffersToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    countOffersToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    executeRevision(
      name: PromiseOrValue<string>,
      pdata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAddressParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBoolParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNumberParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRevisionByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [JSCRevisionsLib.RevisionStructOutput] & {
        value: JSCRevisionsLib.RevisionStructOutput;
      }
    >;

    getStringParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      jurisdiction_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    isFrozenOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFrozenToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidParameterIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidRevisionIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    iterateParameters(overrides?: CallOverrides): Promise<[BigNumber]>;

    iterateRevisions(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      owner: PromiseOrValue<string>,
      titleId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextParameter(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextRevision(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offerToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offerToBuyAtIndex(
      tokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[JSCTitleTokenLib.OfferStructOutput]>;

    offerToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offerToSellAtIndex(
      tokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[JSCTitleTokenLib.OfferStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerTokenAtIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    parameterCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    parameterIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[JSCConfigurableLib.ParameterInfoStructOutput]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revisionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    revisionIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [JSCRevisionsLib.RevisionStructOutput] & {
        value: JSCRevisionsLib.RevisionStructOutput;
      }
    >;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFrozenContract(
      frozen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFrozenOwner(
      owner: PromiseOrValue<string>,
      frozen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFrozenToken(
      tokenId: PromiseOrValue<BigNumberish>,
      frozen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    titleToTokenId(
      titleId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenToTitleId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOfferToBuy(
    tokenId: PromiseOrValue<BigNumberish>,
    buyer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOfferToSell(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOfferToBuy(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOfferToSell(
    tokenId: PromiseOrValue<BigNumberish>,
    buyer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  countOffersToBuy(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countOffersToSell(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeRevision(
    name: PromiseOrValue<string>,
    pdata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAddressParameter(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBoolParameter(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNumberParameter(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRevisionByName(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<JSCRevisionsLib.RevisionStructOutput>;

  getStringParameter(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  init(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    baseURI_: PromiseOrValue<string>,
    jurisdiction_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFrozen(overrides?: CallOverrides): Promise<boolean>;

  isFrozenOwner(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFrozenToken(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidParameterIterator(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidRevisionIterator(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  iterateParameters(overrides?: CallOverrides): Promise<BigNumber>;

  iterateRevisions(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    owner: PromiseOrValue<string>,
    titleId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextParameter(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nextRevision(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offerToBuy(
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offerToBuyAtIndex(
    tokenId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<JSCTitleTokenLib.OfferStructOutput>;

  offerToSell(
    tokenId: PromiseOrValue<BigNumberish>,
    buyer: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offerToSellAtIndex(
    tokenId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<JSCTitleTokenLib.OfferStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerTokenAtIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  parameterCount(overrides?: CallOverrides): Promise<BigNumber>;

  parameterIteratorGet(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<JSCConfigurableLib.ParameterInfoStructOutput>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revisionCount(overrides?: CallOverrides): Promise<BigNumber>;

  revisionIteratorGet(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<JSCRevisionsLib.RevisionStructOutput>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFrozenContract(
    frozen: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFrozenOwner(
    owner: PromiseOrValue<string>,
    frozen: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFrozenToken(
    tokenId: PromiseOrValue<BigNumberish>,
    frozen: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  titleToTokenId(
    titleId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenToTitleId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOfferToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOfferToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOfferToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOfferToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    countOffersToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countOffersToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeRevision(
      name: PromiseOrValue<string>,
      pdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBoolParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNumberParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevisionByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<JSCRevisionsLib.RevisionStructOutput>;

    getStringParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      jurisdiction_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFrozen(overrides?: CallOverrides): Promise<boolean>;

    isFrozenOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFrozenToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidParameterIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidRevisionIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    iterateParameters(overrides?: CallOverrides): Promise<BigNumber>;

    iterateRevisions(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      owner: PromiseOrValue<string>,
      titleId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nextParameter(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextRevision(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    offerToBuyAtIndex(
      tokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<JSCTitleTokenLib.OfferStructOutput>;

    offerToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    offerToSellAtIndex(
      tokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<JSCTitleTokenLib.OfferStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerTokenAtIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parameterCount(overrides?: CallOverrides): Promise<BigNumber>;

    parameterIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<JSCConfigurableLib.ParameterInfoStructOutput>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revisionCount(overrides?: CallOverrides): Promise<BigNumber>;

    revisionIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<JSCRevisionsLib.RevisionStructOutput>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrozenContract(
      frozen: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrozenOwner(
      owner: PromiseOrValue<string>,
      frozen: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrozenToken(
      tokenId: PromiseOrValue<BigNumberish>,
      frozen: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    titleToTokenId(
      titleId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToTitleId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressParameterAdded(string,address)"(
      name?: null,
      value?: null
    ): AddressParameterAddedEventFilter;
    AddressParameterAdded(
      name?: null,
      value?: null
    ): AddressParameterAddedEventFilter;

    "AddressParameterRemoved(string,address)"(
      name?: null,
      value?: null
    ): AddressParameterRemovedEventFilter;
    AddressParameterRemoved(
      name?: null,
      value?: null
    ): AddressParameterRemovedEventFilter;

    "AddressParameterUpdated(string,address)"(
      name?: null,
      value?: null
    ): AddressParameterUpdatedEventFilter;
    AddressParameterUpdated(
      name?: null,
      value?: null
    ): AddressParameterUpdatedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BoolParameterAdded(string,bool)"(
      name?: null,
      value?: null
    ): BoolParameterAddedEventFilter;
    BoolParameterAdded(
      name?: null,
      value?: null
    ): BoolParameterAddedEventFilter;

    "BoolParameterUpdated(string,bool)"(
      name?: null,
      value?: null
    ): BoolParameterUpdatedEventFilter;
    BoolParameterUpdated(
      name?: null,
      value?: null
    ): BoolParameterUpdatedEventFilter;

    "ContractFrozen(address,bool)"(
      con?: null,
      frozen?: null
    ): ContractFrozenEventFilter;
    ContractFrozen(con?: null, frozen?: null): ContractFrozenEventFilter;

    "NumberParameterAdded(string,uint256)"(
      name?: null,
      value?: null
    ): NumberParameterAddedEventFilter;
    NumberParameterAdded(
      name?: null,
      value?: null
    ): NumberParameterAddedEventFilter;

    "NumberParameterUpdated(string,uint256)"(
      name?: null,
      value?: null
    ): NumberParameterUpdatedEventFilter;
    NumberParameterUpdated(
      name?: null,
      value?: null
    ): NumberParameterUpdatedEventFilter;

    "OfferToBuy(uint256,address,uint256)"(
      tokenId?: null,
      buyer?: null,
      amount?: null
    ): OfferToBuyEventFilter;
    OfferToBuy(
      tokenId?: null,
      buyer?: null,
      amount?: null
    ): OfferToBuyEventFilter;

    "OfferToBuyCancelled(uint256,address)"(
      tokenId?: null,
      buyer?: null
    ): OfferToBuyCancelledEventFilter;
    OfferToBuyCancelled(
      tokenId?: null,
      buyer?: null
    ): OfferToBuyCancelledEventFilter;

    "OfferToSell(uint256,address,uint256)"(
      tokenId?: null,
      buyer?: null,
      amount?: null
    ): OfferToSellEventFilter;
    OfferToSell(
      tokenId?: null,
      buyer?: null,
      amount?: null
    ): OfferToSellEventFilter;

    "OfferToSellCancelled(uint256,address)"(
      tokenId?: null,
      buyer?: null
    ): OfferToSellCancelledEventFilter;
    OfferToSellCancelled(
      tokenId?: null,
      buyer?: null
    ): OfferToSellCancelledEventFilter;

    "OwnerFrozen(address,bool)"(
      owner?: null,
      frozen?: null
    ): OwnerFrozenEventFilter;
    OwnerFrozen(owner?: null, frozen?: null): OwnerFrozenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RevisionAdded(string)"(name?: null): RevisionAddedEventFilter;
    RevisionAdded(name?: null): RevisionAddedEventFilter;

    "RevisionExecuted(string,bytes)"(
      name?: null,
      pdata?: null
    ): RevisionExecutedEventFilter;
    RevisionExecuted(name?: null, pdata?: null): RevisionExecutedEventFilter;

    "RevisionRemoved(string)"(name?: null): RevisionRemovedEventFilter;
    RevisionRemoved(name?: null): RevisionRemovedEventFilter;

    "StringParameterAdded(string,string)"(
      name?: null,
      value?: null
    ): StringParameterAddedEventFilter;
    StringParameterAdded(
      name?: null,
      value?: null
    ): StringParameterAddedEventFilter;

    "StringParameterUpdated(string,string)"(
      name?: null,
      value?: null
    ): StringParameterUpdatedEventFilter;
    StringParameterUpdated(
      name?: null,
      value?: null
    ): StringParameterUpdatedEventFilter;

    "TokenFrozen(uint256,bool)"(
      tokenId?: null,
      frozen?: null
    ): TokenFrozenEventFilter;
    TokenFrozen(tokenId?: null, frozen?: null): TokenFrozenEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    acceptOfferToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOfferToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOfferToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOfferToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    countOffersToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countOffersToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeRevision(
      name: PromiseOrValue<string>,
      pdata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAddressParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoolParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevisionByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStringParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      jurisdiction_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    isFrozenOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFrozenToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidParameterIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidRevisionIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    iterateParameters(overrides?: CallOverrides): Promise<BigNumber>;

    iterateRevisions(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      owner: PromiseOrValue<string>,
      titleId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextParameter(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextRevision(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offerToBuyAtIndex(
      tokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offerToSellAtIndex(
      tokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerTokenAtIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parameterCount(overrides?: CallOverrides): Promise<BigNumber>;

    parameterIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revisionCount(overrides?: CallOverrides): Promise<BigNumber>;

    revisionIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFrozenContract(
      frozen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFrozenOwner(
      owner: PromiseOrValue<string>,
      frozen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFrozenToken(
      tokenId: PromiseOrValue<BigNumberish>,
      frozen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    titleToTokenId(
      titleId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToTitleId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOfferToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOfferToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOfferToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOfferToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    countOffersToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countOffersToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeRevision(
      name: PromiseOrValue<string>,
      pdata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAddressParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoolParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevisionByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStringParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      baseURI_: PromiseOrValue<string>,
      jurisdiction_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFrozenOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFrozenToken(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidParameterIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidRevisionIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    iterateParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iterateRevisions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      owner: PromiseOrValue<string>,
      titleId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextParameter(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextRevision(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerToBuy(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offerToBuyAtIndex(
      tokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerToSell(
      tokenId: PromiseOrValue<BigNumberish>,
      buyer: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offerToSellAtIndex(
      tokenId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerTokenAtIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parameterCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parameterIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revisionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revisionIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFrozenContract(
      frozen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFrozenOwner(
      owner: PromiseOrValue<string>,
      frozen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFrozenToken(
      tokenId: PromiseOrValue<BigNumberish>,
      frozen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    titleToTokenId(
      titleId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToTitleId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
