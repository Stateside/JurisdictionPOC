/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IJSCGovernor {
  export type VotingParamsStruct = {
    votingPeriod: PromiseOrValue<BigNumberish>;
    approvals: PromiseOrValue<BigNumberish>;
    majority: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
  };

  export type VotingParamsStructOutput = [number, number, number, number] & {
    votingPeriod: number;
    approvals: number;
    majority: number;
    quorum: number;
  };

  export type RevisionCallStruct = {
    target: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    pdata: PromiseOrValue<BytesLike>;
  };

  export type RevisionCallStructOutput = [string, string, string] & {
    target: string;
    name: string;
    pdata: string;
  };
}

export declare namespace JSCRevisionsLib {
  export type VotingRulesStruct = {
    votingPeriod: PromiseOrValue<BigNumberish>;
    approvals: PromiseOrValue<BigNumberish>;
    majority: PromiseOrValue<BigNumberish>;
    quorum: PromiseOrValue<BigNumberish>;
    roles: PromiseOrValue<string>[];
  };

  export type VotingRulesStructOutput = [
    number,
    number,
    number,
    number,
    string[]
  ] & {
    votingPeriod: number;
    approvals: number;
    majority: number;
    quorum: number;
    roles: string[];
  };

  export type RevisionStruct = {
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    paramNames: PromiseOrValue<string>[];
    paramTypes: PromiseOrValue<BigNumberish>[];
    paramHints: PromiseOrValue<string>[];
    rules: JSCRevisionsLib.VotingRulesStruct;
  };

  export type RevisionStructOutput = [
    string,
    string,
    string[],
    number[],
    string[],
    JSCRevisionsLib.VotingRulesStructOutput
  ] & {
    name: string;
    description: string;
    paramNames: string[];
    paramTypes: number[];
    paramHints: string[];
    rules: JSCRevisionsLib.VotingRulesStructOutput;
  };
}

export declare namespace JSCConfigurableLib {
  export type ParameterInfoStruct = {
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    ptype: PromiseOrValue<BigNumberish>;
  };

  export type ParameterInfoStructOutput = [string, string, number] & {
    name: string;
    description: string;
    ptype: number;
  };
}

export interface JSCGovernorInterface extends utils.Interface {
  functions: {
    "castVote(uint256,uint8)": FunctionFragment;
    "execute((address,string,bytes)[],bytes32,uint256)": FunctionFragment;
    "executeRevision(string,bytes)": FunctionFragment;
    "getAddressParameter(string)": FunctionFragment;
    "getBoolParameter(string)": FunctionFragment;
    "getNumberParameter(string)": FunctionFragment;
    "getRevisionByName(string)": FunctionFragment;
    "getStringParameter(string)": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "hashProposal((address,string,bytes)[],bytes32,uint256)": FunctionFragment;
    "init(address)": FunctionFragment;
    "isFrozen()": FunctionFragment;
    "isValidParameterIterator(uint256)": FunctionFragment;
    "isValidRevisionIterator(uint256)": FunctionFragment;
    "iterateParameters()": FunctionFragment;
    "iterateRevisions()": FunctionFragment;
    "nextParameter(uint256)": FunctionFragment;
    "nextRevision(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "parameterCount()": FunctionFragment;
    "parameterIteratorGet(uint256)": FunctionFragment;
    "proposalDeadline(uint256)": FunctionFragment;
    "proposalVotes(uint256)": FunctionFragment;
    "propose((address,string,bytes)[],string,uint256)": FunctionFragment;
    "quorum(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revisionCount()": FunctionFragment;
    "revisionIteratorGet(uint256)": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "castVote"
      | "execute"
      | "executeRevision"
      | "getAddressParameter"
      | "getBoolParameter"
      | "getNumberParameter"
      | "getRevisionByName"
      | "getStringParameter"
      | "hasVoted"
      | "hashProposal"
      | "init"
      | "isFrozen"
      | "isValidParameterIterator"
      | "isValidRevisionIterator"
      | "iterateParameters"
      | "iterateRevisions"
      | "nextParameter"
      | "nextRevision"
      | "owner"
      | "parameterCount"
      | "parameterIteratorGet"
      | "proposalDeadline"
      | "proposalVotes"
      | "propose"
      | "quorum"
      | "renounceOwnership"
      | "revisionCount"
      | "revisionIteratorGet"
      | "state"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      IJSCGovernor.RevisionCallStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRevision",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressParameter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoolParameter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberParameter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevisionByName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStringParameter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashProposal",
    values: [
      IJSCGovernor.RevisionCallStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidParameterIterator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidRevisionIterator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "iterateParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "iterateRevisions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextParameter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRevision",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parameterCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parameterIteratorGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDeadline",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalVotes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [
      IJSCGovernor.RevisionCallStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quorum",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revisionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revisionIteratorGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "state",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRevision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoolParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevisionByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStringParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidParameterIterator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidRevisionIterator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iterateParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iterateRevisions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRevision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parameterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parameterIteratorGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revisionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revisionIteratorGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddressParameterAdded(string,address)": EventFragment;
    "AddressParameterRemoved(string,address)": EventFragment;
    "AddressParameterUpdated(string,address)": EventFragment;
    "BoolParameterAdded(string,bool)": EventFragment;
    "BoolParameterUpdated(string,bool)": EventFragment;
    "ContractFrozen(address,bool)": EventFragment;
    "NumberParameterAdded(string,uint256)": EventFragment;
    "NumberParameterUpdated(string,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalCanceled(uint256)": EventFragment;
    "ProposalCreated(uint256,address,uint256,tuple,tuple[],uint256,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "RevisionAdded(string)": EventFragment;
    "RevisionExecuted(string,bytes)": EventFragment;
    "RevisionRemoved(string)": EventFragment;
    "StringParameterAdded(string,string)": EventFragment;
    "StringParameterUpdated(string,string)": EventFragment;
    "VoteCast(address,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressParameterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressParameterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolParameterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoolParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NumberParameterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NumberParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevisionAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevisionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevisionRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringParameterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StringParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export interface AddressParameterAddedEventObject {
  name: string;
  value: string;
}
export type AddressParameterAddedEvent = TypedEvent<
  [string, string],
  AddressParameterAddedEventObject
>;

export type AddressParameterAddedEventFilter =
  TypedEventFilter<AddressParameterAddedEvent>;

export interface AddressParameterRemovedEventObject {
  name: string;
  value: string;
}
export type AddressParameterRemovedEvent = TypedEvent<
  [string, string],
  AddressParameterRemovedEventObject
>;

export type AddressParameterRemovedEventFilter =
  TypedEventFilter<AddressParameterRemovedEvent>;

export interface AddressParameterUpdatedEventObject {
  name: string;
  value: string;
}
export type AddressParameterUpdatedEvent = TypedEvent<
  [string, string],
  AddressParameterUpdatedEventObject
>;

export type AddressParameterUpdatedEventFilter =
  TypedEventFilter<AddressParameterUpdatedEvent>;

export interface BoolParameterAddedEventObject {
  name: string;
  value: boolean;
}
export type BoolParameterAddedEvent = TypedEvent<
  [string, boolean],
  BoolParameterAddedEventObject
>;

export type BoolParameterAddedEventFilter =
  TypedEventFilter<BoolParameterAddedEvent>;

export interface BoolParameterUpdatedEventObject {
  name: string;
  value: boolean;
}
export type BoolParameterUpdatedEvent = TypedEvent<
  [string, boolean],
  BoolParameterUpdatedEventObject
>;

export type BoolParameterUpdatedEventFilter =
  TypedEventFilter<BoolParameterUpdatedEvent>;

export interface ContractFrozenEventObject {
  con: string;
  frozen: boolean;
}
export type ContractFrozenEvent = TypedEvent<
  [string, boolean],
  ContractFrozenEventObject
>;

export type ContractFrozenEventFilter = TypedEventFilter<ContractFrozenEvent>;

export interface NumberParameterAddedEventObject {
  name: string;
  value: BigNumber;
}
export type NumberParameterAddedEvent = TypedEvent<
  [string, BigNumber],
  NumberParameterAddedEventObject
>;

export type NumberParameterAddedEventFilter =
  TypedEventFilter<NumberParameterAddedEvent>;

export interface NumberParameterUpdatedEventObject {
  name: string;
  value: BigNumber;
}
export type NumberParameterUpdatedEvent = TypedEvent<
  [string, BigNumber],
  NumberParameterUpdatedEventObject
>;

export type NumberParameterUpdatedEventFilter =
  TypedEventFilter<NumberParameterUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProposalCanceledEventObject {
  proposalId: BigNumber;
}
export type ProposalCanceledEvent = TypedEvent<
  [BigNumber],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalCreatedEventObject {
  proposalId: BigNumber;
  proposer: string;
  startBlock: BigNumber;
  params: IJSCGovernor.VotingParamsStructOutput;
  revs: IJSCGovernor.RevisionCallStructOutput[];
  version: BigNumber;
  description: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    IJSCGovernor.VotingParamsStructOutput,
    IJSCGovernor.RevisionCallStructOutput[],
    BigNumber,
    string
  ],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  proposalId: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface RevisionAddedEventObject {
  name: string;
}
export type RevisionAddedEvent = TypedEvent<[string], RevisionAddedEventObject>;

export type RevisionAddedEventFilter = TypedEventFilter<RevisionAddedEvent>;

export interface RevisionExecutedEventObject {
  name: string;
  pdata: string;
}
export type RevisionExecutedEvent = TypedEvent<
  [string, string],
  RevisionExecutedEventObject
>;

export type RevisionExecutedEventFilter =
  TypedEventFilter<RevisionExecutedEvent>;

export interface RevisionRemovedEventObject {
  name: string;
}
export type RevisionRemovedEvent = TypedEvent<
  [string],
  RevisionRemovedEventObject
>;

export type RevisionRemovedEventFilter = TypedEventFilter<RevisionRemovedEvent>;

export interface StringParameterAddedEventObject {
  name: string;
  value: string;
}
export type StringParameterAddedEvent = TypedEvent<
  [string, string],
  StringParameterAddedEventObject
>;

export type StringParameterAddedEventFilter =
  TypedEventFilter<StringParameterAddedEvent>;

export interface StringParameterUpdatedEventObject {
  name: string;
  value: string;
}
export type StringParameterUpdatedEvent = TypedEvent<
  [string, string],
  StringParameterUpdatedEventObject
>;

export type StringParameterUpdatedEventFilter =
  TypedEventFilter<StringParameterUpdatedEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalId: BigNumber;
  support: number;
}
export type VoteCastEvent = TypedEvent<
  [string, BigNumber, number],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface JSCGovernor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JSCGovernorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    castVote(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      revs: IJSCGovernor.RevisionCallStruct[],
      descriptionHash: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeRevision(
      name: PromiseOrValue<string>,
      pdata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAddressParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBoolParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNumberParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRevisionByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [JSCRevisionsLib.RevisionStructOutput] & {
        value: JSCRevisionsLib.RevisionStructOutput;
      }
    >;

    getStringParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasVoted(
      proposalId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hashProposal(
      revs: IJSCGovernor.RevisionCallStruct[],
      descriptionHash: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    init(
      jurisdiction: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    isValidParameterIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidRevisionIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    iterateParameters(overrides?: CallOverrides): Promise<[BigNumber]>;

    iterateRevisions(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextParameter(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextRevision(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parameterCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    parameterIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[JSCConfigurableLib.ParameterInfoStructOutput]>;

    proposalDeadline(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposalVotes(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        againstVotes: BigNumber;
        forVotes: BigNumber;
        abstainVotes: BigNumber;
      }
    >;

    propose(
      revs: IJSCGovernor.RevisionCallStruct[],
      description: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quorum(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revisionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    revisionIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [JSCRevisionsLib.RevisionStructOutput] & {
        value: JSCRevisionsLib.RevisionStructOutput;
      }
    >;

    state(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  castVote(
    proposalId: PromiseOrValue<BigNumberish>,
    support: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    revs: IJSCGovernor.RevisionCallStruct[],
    descriptionHash: PromiseOrValue<BytesLike>,
    version: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeRevision(
    name: PromiseOrValue<string>,
    pdata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAddressParameter(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBoolParameter(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNumberParameter(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRevisionByName(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<JSCRevisionsLib.RevisionStructOutput>;

  getStringParameter(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasVoted(
    proposalId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashProposal(
    revs: IJSCGovernor.RevisionCallStruct[],
    descriptionHash: PromiseOrValue<BytesLike>,
    version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    jurisdiction: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isFrozen(overrides?: CallOverrides): Promise<boolean>;

  isValidParameterIterator(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidRevisionIterator(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  iterateParameters(overrides?: CallOverrides): Promise<BigNumber>;

  iterateRevisions(overrides?: CallOverrides): Promise<BigNumber>;

  nextParameter(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nextRevision(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  parameterCount(overrides?: CallOverrides): Promise<BigNumber>;

  parameterIteratorGet(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<JSCConfigurableLib.ParameterInfoStructOutput>;

  proposalDeadline(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposalVotes(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      againstVotes: BigNumber;
      forVotes: BigNumber;
      abstainVotes: BigNumber;
    }
  >;

  propose(
    revs: IJSCGovernor.RevisionCallStruct[],
    description: PromiseOrValue<string>,
    version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quorum(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revisionCount(overrides?: CallOverrides): Promise<BigNumber>;

  revisionIteratorGet(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<JSCRevisionsLib.RevisionStructOutput>;

  state(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    castVote(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      revs: IJSCGovernor.RevisionCallStruct[],
      descriptionHash: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeRevision(
      name: PromiseOrValue<string>,
      pdata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBoolParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNumberParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevisionByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<JSCRevisionsLib.RevisionStructOutput>;

    getStringParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasVoted(
      proposalId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashProposal(
      revs: IJSCGovernor.RevisionCallStruct[],
      descriptionHash: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      jurisdiction: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isFrozen(overrides?: CallOverrides): Promise<boolean>;

    isValidParameterIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidRevisionIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    iterateParameters(overrides?: CallOverrides): Promise<BigNumber>;

    iterateRevisions(overrides?: CallOverrides): Promise<BigNumber>;

    nextParameter(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextRevision(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    parameterCount(overrides?: CallOverrides): Promise<BigNumber>;

    parameterIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<JSCConfigurableLib.ParameterInfoStructOutput>;

    proposalDeadline(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalVotes(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        againstVotes: BigNumber;
        forVotes: BigNumber;
        abstainVotes: BigNumber;
      }
    >;

    propose(
      revs: IJSCGovernor.RevisionCallStruct[],
      description: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    quorum(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revisionCount(overrides?: CallOverrides): Promise<BigNumber>;

    revisionIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<JSCRevisionsLib.RevisionStructOutput>;

    state(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressParameterAdded(string,address)"(
      name?: null,
      value?: null
    ): AddressParameterAddedEventFilter;
    AddressParameterAdded(
      name?: null,
      value?: null
    ): AddressParameterAddedEventFilter;

    "AddressParameterRemoved(string,address)"(
      name?: null,
      value?: null
    ): AddressParameterRemovedEventFilter;
    AddressParameterRemoved(
      name?: null,
      value?: null
    ): AddressParameterRemovedEventFilter;

    "AddressParameterUpdated(string,address)"(
      name?: null,
      value?: null
    ): AddressParameterUpdatedEventFilter;
    AddressParameterUpdated(
      name?: null,
      value?: null
    ): AddressParameterUpdatedEventFilter;

    "BoolParameterAdded(string,bool)"(
      name?: null,
      value?: null
    ): BoolParameterAddedEventFilter;
    BoolParameterAdded(
      name?: null,
      value?: null
    ): BoolParameterAddedEventFilter;

    "BoolParameterUpdated(string,bool)"(
      name?: null,
      value?: null
    ): BoolParameterUpdatedEventFilter;
    BoolParameterUpdated(
      name?: null,
      value?: null
    ): BoolParameterUpdatedEventFilter;

    "ContractFrozen(address,bool)"(
      con?: null,
      frozen?: null
    ): ContractFrozenEventFilter;
    ContractFrozen(con?: null, frozen?: null): ContractFrozenEventFilter;

    "NumberParameterAdded(string,uint256)"(
      name?: null,
      value?: null
    ): NumberParameterAddedEventFilter;
    NumberParameterAdded(
      name?: null,
      value?: null
    ): NumberParameterAddedEventFilter;

    "NumberParameterUpdated(string,uint256)"(
      name?: null,
      value?: null
    ): NumberParameterUpdatedEventFilter;
    NumberParameterUpdated(
      name?: null,
      value?: null
    ): NumberParameterUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProposalCanceled(uint256)"(proposalId?: null): ProposalCanceledEventFilter;
    ProposalCanceled(proposalId?: null): ProposalCanceledEventFilter;

    "ProposalCreated(uint256,address,uint256,tuple,tuple[],uint256,string)"(
      proposalId?: null,
      proposer?: null,
      startBlock?: null,
      params?: null,
      revs?: null,
      version?: null,
      description?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      proposalId?: null,
      proposer?: null,
      startBlock?: null,
      params?: null,
      revs?: null,
      version?: null,
      description?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256)"(proposalId?: null): ProposalExecutedEventFilter;
    ProposalExecuted(proposalId?: null): ProposalExecutedEventFilter;

    "RevisionAdded(string)"(name?: null): RevisionAddedEventFilter;
    RevisionAdded(name?: null): RevisionAddedEventFilter;

    "RevisionExecuted(string,bytes)"(
      name?: null,
      pdata?: null
    ): RevisionExecutedEventFilter;
    RevisionExecuted(name?: null, pdata?: null): RevisionExecutedEventFilter;

    "RevisionRemoved(string)"(name?: null): RevisionRemovedEventFilter;
    RevisionRemoved(name?: null): RevisionRemovedEventFilter;

    "StringParameterAdded(string,string)"(
      name?: null,
      value?: null
    ): StringParameterAddedEventFilter;
    StringParameterAdded(
      name?: null,
      value?: null
    ): StringParameterAddedEventFilter;

    "StringParameterUpdated(string,string)"(
      name?: null,
      value?: null
    ): StringParameterUpdatedEventFilter;
    StringParameterUpdated(
      name?: null,
      value?: null
    ): StringParameterUpdatedEventFilter;

    "VoteCast(address,uint256,uint8)"(
      voter?: PromiseOrValue<string> | null,
      proposalId?: null,
      support?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: PromiseOrValue<string> | null,
      proposalId?: null,
      support?: null
    ): VoteCastEventFilter;
  };

  estimateGas: {
    castVote(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      revs: IJSCGovernor.RevisionCallStruct[],
      descriptionHash: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeRevision(
      name: PromiseOrValue<string>,
      pdata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAddressParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoolParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevisionByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStringParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      proposalId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashProposal(
      revs: IJSCGovernor.RevisionCallStruct[],
      descriptionHash: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      jurisdiction: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    isValidParameterIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidRevisionIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    iterateParameters(overrides?: CallOverrides): Promise<BigNumber>;

    iterateRevisions(overrides?: CallOverrides): Promise<BigNumber>;

    nextParameter(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextRevision(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parameterCount(overrides?: CallOverrides): Promise<BigNumber>;

    parameterIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalDeadline(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalVotes(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      revs: IJSCGovernor.RevisionCallStruct[],
      description: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quorum(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revisionCount(overrides?: CallOverrides): Promise<BigNumber>;

    revisionIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    state(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    castVote(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      revs: IJSCGovernor.RevisionCallStruct[],
      descriptionHash: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeRevision(
      name: PromiseOrValue<string>,
      pdata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAddressParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoolParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevisionByName(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStringParameter(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      proposalId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashProposal(
      revs: IJSCGovernor.RevisionCallStruct[],
      descriptionHash: PromiseOrValue<BytesLike>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      jurisdiction: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidParameterIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidRevisionIterator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    iterateParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iterateRevisions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextParameter(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextRevision(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parameterCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parameterIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalDeadline(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalVotes(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      revs: IJSCGovernor.RevisionCallStruct[],
      description: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quorum(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revisionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revisionIteratorGet(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    state(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
