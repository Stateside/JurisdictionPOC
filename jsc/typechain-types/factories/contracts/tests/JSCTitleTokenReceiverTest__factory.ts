/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  JSCTitleTokenReceiverTest,
  JSCTitleTokenReceiverTestInterface,
} from "../../../contracts/tests/JSCTitleTokenReceiverTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610206806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063150b7a0214610030575b600080fd5b61006761003e3660046100f4565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff811681146100c057600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806000806080858703121561010a57600080fd5b6101138561009c565b93506101216020860161009c565b925060408501359150606085013567ffffffffffffffff8082111561014557600080fd5b818701915087601f83011261015957600080fd5b81358181111561016b5761016b6100c5565b604051601f8201601f19908116603f01168101908382118183101715610193576101936100c5565b816040528281528a60208487010111156101ac57600080fd5b8260208601602083013760006020848301015280955050505050509295919450925056fea2646970667358221220b070c42a0d48b749b3fe02f5bfddc36b71a80cd06eeb3074c0888e0f51ddf91864736f6c634300080d0033";

type JSCTitleTokenReceiverTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: JSCTitleTokenReceiverTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class JSCTitleTokenReceiverTest__factory extends ContractFactory {
  constructor(...args: JSCTitleTokenReceiverTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<JSCTitleTokenReceiverTest> {
    return super.deploy(overrides || {}) as Promise<JSCTitleTokenReceiverTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): JSCTitleTokenReceiverTest {
    return super.attach(address) as JSCTitleTokenReceiverTest;
  }
  override connect(signer: Signer): JSCTitleTokenReceiverTest__factory {
    return super.connect(signer) as JSCTitleTokenReceiverTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): JSCTitleTokenReceiverTestInterface {
    return new utils.Interface(_abi) as JSCTitleTokenReceiverTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): JSCTitleTokenReceiverTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as JSCTitleTokenReceiverTest;
  }
}
